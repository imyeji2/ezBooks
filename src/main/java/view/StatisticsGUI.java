/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import model.StatisticsDAO;
import model.Statistics1DTO;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import model.Statistics2DTO;
import model.Statistics3DTO;

/**
 *
 * @author YJ
 */
public class StatisticsGUI extends javax.swing.JFrame implements ItemListener, ActionListener{
    private StatisticsDAO Dao;
    private String[] colNames1 ={"날짜","판매금액","판매수량"};
    private String[] colNames2 ={"순위","연령","성별","구매건수"};
    private String[] colNames3 ={"순위","카테고리명","판매권수"};
    private DefaultTableModel model = new DefaultTableModel();
    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    private DecimalFormat df = new DecimalFormat("#,###.##");
    
    
    /**
     * Creates new form InOrder
     */
    public StatisticsGUI() {
        initComponents();
        init();
        addEvent();
        setLocationRelativeTo(null); //가운데 배치
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg_select = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Statistics1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        rd_week = new javax.swing.JRadioButton();
        rd_month = new javax.swing.JRadioButton();
        rd_year = new javax.swing.JRadioButton();
        tfSerch1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tf_Serch2 = new javax.swing.JTextField();
        bt_serch = new javax.swing.JButton();
        bt_showAll = new javax.swing.JButton();
        Statistics2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        rd_week2 = new javax.swing.JRadioButton();
        rd_month2 = new javax.swing.JRadioButton();
        rd_year2 = new javax.swing.JRadioButton();
        Statistics3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        rd_week3 = new javax.swing.JRadioButton();
        rd_month3 = new javax.swing.JRadioButton();
        rd_year3 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("분석관리");

        jTabbedPane1.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N

        jTable1.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "날짜", "판매금액", "판매수량"
            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setDragEnabled(true);
        jTable1.setRowHeight(25);
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        bg_select.add(rd_week);
        rd_week.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        rd_week.setText("주간");

        bg_select.add(rd_month);
        rd_month.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        rd_month.setText("월간");
        rd_month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd_monthActionPerformed(evt);
            }
        });

        bg_select.add(rd_year);
        rd_year.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        rd_year.setText("연간");
        rd_year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd_yearActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("~");

        bt_serch.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        bt_serch.setText("검색");

        bt_showAll.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        bt_showAll.setText("전체조회");

        javax.swing.GroupLayout Statistics1Layout = new javax.swing.GroupLayout(Statistics1);
        Statistics1.setLayout(Statistics1Layout);
        Statistics1Layout.setHorizontalGroup(
            Statistics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Statistics1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(Statistics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Statistics1Layout.createSequentialGroup()
                        .addComponent(rd_week)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rd_month)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rd_year)
                        .addGap(18, 18, 18)
                        .addComponent(tfSerch1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_Serch2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_serch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_showAll, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        Statistics1Layout.setVerticalGroup(
            Statistics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Statistics1Layout.createSequentialGroup()
                .addGroup(Statistics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Statistics1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(Statistics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rd_week)
                            .addComponent(rd_month)
                            .addComponent(rd_year)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Statistics1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(Statistics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfSerch1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(tf_Serch2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bt_serch)
                            .addComponent(bt_showAll))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        jTabbedPane1.addTab("기간별", Statistics1);

        jTable2.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "순위", "성별", "연령", "구매건수"
            }
        ));
        jTable2.setCellSelectionEnabled(true);
        jTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable2.setDragEnabled(true);
        jTable2.setRowHeight(20);
        jTable2.setShowGrid(true);
        jScrollPane3.setViewportView(jTable2);

        bg_select.add(rd_week2);
        rd_week2.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        rd_week2.setText("주간");

        bg_select.add(rd_month2);
        rd_month2.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        rd_month2.setText("월간");
        rd_month2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd_month2ActionPerformed(evt);
            }
        });

        bg_select.add(rd_year2);
        rd_year2.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        rd_year2.setText("연간");
        rd_year2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd_year2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Statistics2Layout = new javax.swing.GroupLayout(Statistics2);
        Statistics2.setLayout(Statistics2Layout);
        Statistics2Layout.setHorizontalGroup(
            Statistics2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Statistics2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(Statistics2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Statistics2Layout.createSequentialGroup()
                        .addComponent(rd_week2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rd_month2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rd_year2)))
                .addGap(39, 51, Short.MAX_VALUE))
        );
        Statistics2Layout.setVerticalGroup(
            Statistics2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Statistics2Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(Statistics2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rd_week2)
                    .addComponent(rd_month2)
                    .addComponent(rd_year2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jTabbedPane1.addTab("연령별", Statistics2);

        jTable4.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "순위", "카테고리", "판매건수"
            }
        ));
        jTable4.setCellSelectionEnabled(true);
        jTable4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable4.setDragEnabled(true);
        jTable4.setRowHeight(20);
        jTable4.setShowGrid(true);
        jScrollPane4.setViewportView(jTable4);

        bg_select.add(rd_week3);
        rd_week3.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        rd_week3.setSelected(true);
        rd_week3.setText("주간");

        bg_select.add(rd_month3);
        rd_month3.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        rd_month3.setText("월간");
        rd_month3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd_month3ActionPerformed(evt);
            }
        });

        bg_select.add(rd_year3);
        rd_year3.setFont(new java.awt.Font("맑은 고딕", 0, 12)); // NOI18N
        rd_year3.setText("연간");
        rd_year3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd_year3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Statistics3Layout = new javax.swing.GroupLayout(Statistics3);
        Statistics3.setLayout(Statistics3Layout);
        Statistics3Layout.setHorizontalGroup(
            Statistics3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Statistics3Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(Statistics3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Statistics3Layout.createSequentialGroup()
                        .addComponent(rd_week3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rd_month3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rd_year3)))
                .addGap(39, 51, Short.MAX_VALUE))
        );
        Statistics3Layout.setVerticalGroup(
            Statistics3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Statistics3Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(Statistics3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rd_week3)
                    .addComponent(rd_month3)
                    .addComponent(rd_year3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jTabbedPane1.addTab("카테고리별", Statistics3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rd_monthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd_monthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rd_monthActionPerformed

    private void rd_month2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd_month2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rd_month2ActionPerformed

    private void rd_month3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd_month3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rd_month3ActionPerformed

    private void rd_year3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd_year3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rd_year3ActionPerformed

    private void rd_year2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd_year2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rd_year2ActionPerformed

    private void rd_yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd_yearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rd_yearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatisticsGUI().setVisible(true);
            }
        });
        
        
    }

    private void init() {
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        rd_week.setSelected(true);
    
        try {
            showAllDate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }
    
    //이벤트 처리
    private void addEvent() {
        jTabbedPane1.addMouseListener(new EventHandler());
        
        rd_week.addItemListener(this);
        rd_month.addItemListener(this);
        rd_year.addItemListener(this);
        rd_week2.addItemListener(this);
        rd_month2.addItemListener(this);
        rd_year2.addItemListener(this);
        rd_week3.addItemListener(this);
        rd_month3.addItemListener(this);
        rd_year3.addItemListener(this);
        
        bt_serch.addActionListener(this);
        bt_showAll.addActionListener(this);
        tf_Serch2.addActionListener(this);
    }
    
 //---------------------이벤트 핸들러------------------------------------------------------------------   
    @Override
    public void itemStateChanged(ItemEvent e) {
        if(e.getSource()==rd_week){try {
            //기간별 주간
            showAllDate();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==rd_month){
            //기간별 월간
            try {
                 showAllDate_Month();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
           
         }else if(e.getSource()==rd_year){

             //기간별 연간
             try {
                 showAllDate_Year();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
          
         }else if(e.getSource()==rd_week2){//성별&연령별(주간)
            try {
                showDefaultRankAgeNGenger_Week();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
         }else if(e.getSource()==rd_month2){//월간
            try {
                showDefaultRankAgeNGenger_Month();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==rd_year2){//연간
            try {
                showDefaultRankAgeNGenger_Year();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==rd_week3){//카테고리별(주간)
            try {
                showCategoryRank_week();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
         }else if(e.getSource()==rd_month3){//월간
            try {
                showCategoryRank_Month();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==rd_year3){//연간
            try {
                showCategoryRank_Year();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {//검색버튼 && 마지막 텍스트 필드
        if(e.getSource()==bt_serch || e.getSource()==tf_Serch2){
            try {
                serchAll();
            } catch (ParseException ex) {
                ex.printStackTrace();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==bt_showAll){
            try {
                //전체조회 버튼
                showAllDate();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }




    
    //탭 전환시 새로고침
    class EventHandler extends MouseAdapter{
        @Override
        public void mouseClicked(MouseEvent e) {
            if(e.getSource()==jTabbedPane1){
                //변경한 탭으로 형변환
                JTabbedPane tap=(JTabbedPane) e.getSource();
                int index = tap.getSelectedIndex();
                System.out.println(index);
                //기간별 통계
                if(index==0){
                    try {
                        showAllDate();
                         rd_week.setSelected(true);
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
               
                //성별, 연령별 통계
                }else if(index==1){
                    try {
                        rd_week2.setSelected(true);
                        showDefaultRankAgeNGenger_Week();
        
                        //카테고리별 통계    showDefaultRankAgeNGenger
                    } catch (SQLException ex) {
                       ex.printStackTrace();
                    }
                }else if(index==2){
                    try {
                        showCategoryRank_week();
                        rd_week3.setSelected(true);
                    } catch (SQLException ex) {
                       ex.printStackTrace();
                    }
                  
                }                
                
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Statistics1;
    private javax.swing.JPanel Statistics2;
    private javax.swing.JPanel Statistics3;
    private javax.swing.ButtonGroup bg_select;
    private javax.swing.JButton bt_serch;
    private javax.swing.JButton bt_showAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private javax.swing.JRadioButton rd_month;
    private javax.swing.JRadioButton rd_month2;
    private javax.swing.JRadioButton rd_month3;
    private javax.swing.JRadioButton rd_week;
    private javax.swing.JRadioButton rd_week2;
    private javax.swing.JRadioButton rd_week3;
    private javax.swing.JRadioButton rd_year;
    private javax.swing.JRadioButton rd_year2;
    private javax.swing.JRadioButton rd_year3;
    private javax.swing.JTextField tfSerch1;
    private javax.swing.JTextField tf_Serch2;
    // End of variables declaration//GEN-END:variables

 //------------------------기간별 통계------------------------------------------------------------
   
    //전체 조회(주간 디폴트)
    private void showAllDate() throws SQLException {
        //1
        //2
        Dao = new StatisticsDAO();
        List<Statistics1DTO> list = Dao.showAllDateTable();
        
        
        //3
        Object[][] data = new Object[list.size()][colNames1.length];
        for(int i=0; i<list.size();i++){
            Statistics1DTO dto = list.get(i);
            String date[] = dto.getSellDate().split("-");
            
            data[i][0] = date[0]+"년 "+date[1]+"주차";
            data[i][1] = df.format(dto.getPrice())+"원";
            data[i][2] = dto.getQty()+"건";
        }
        model.setDataVector(data,colNames1);
        jTable1.setModel(model);
        //columnSize();
        tableCellCenter(jTable1);
    }
    
    //기간별 월간
    private void showAllDate_Month() throws SQLException {
        //1
        //2
        Dao = new StatisticsDAO();
        List<Statistics1DTO> list = Dao.showAllDateTable_Month();
        
        //3
        Object[][] data = new Object[list.size()][colNames1.length];
        for(int i=0; i<list.size();i++){
            Statistics1DTO dto = list.get(i);
            String date[] = dto.getSellDate().split("-");
            
            data[i][0] = date[0]+"년 "+date[1]+"월";
            data[i][1] = df.format(dto.getPrice())+"원";
            data[i][2] = dto.getQty()+"건";
        }
        model.setDataVector(data,colNames1);
        jTable1.setModel(model);
        //columnSize();
        tableCellCenter(jTable1);        
    }
    
    //기간별 연간
    private void showAllDate_Year() throws SQLException {
        //1
        //2
        Dao = new StatisticsDAO();
        List<Statistics1DTO> list = Dao.showAllDateTable_Year();
        
        //3
        Object[][] data = new Object[list.size()][colNames1.length];
        for(int i=0; i<list.size();i++){
            Statistics1DTO dto = list.get(i);
            
            data[i][0] = dto.getSellDate()+"년";
            data[i][1] = df.format(dto.getPrice())+"원";
            data[i][2] = dto.getQty()+"건";
        }
        model.setDataVector(data,colNames1);
        jTable1.setModel(model);
        //columnSize();
        tableCellCenter(jTable1);       
    }

    //기간별 날짜 지정 검색
    private void serchAll() throws ParseException, SQLException {
        //1
        String firstDay = tfSerch1.getText();
        String lastDay = tf_Serch2.getText();
        
        //유효성 검사
        if(firstDay==null || firstDay.isEmpty()){
            JOptionPane.showMessageDialog(this, "날짜를 입력해주세요");
            tfSerch1.requestFocus();
            return;
        }else if(lastDay==null || lastDay.isEmpty()){
            JOptionPane.showMessageDialog(this, "날짜를 입력해주세요");
            tf_Serch2.requestFocus();
            return;
        }
        
        //날짜 형식 체크
        if(!checkDate(firstDay)){
            JOptionPane.showMessageDialog(this, "날짜 형식에 맞춰서 입력해주세요(예:2023-01-01)");
            tfSerch1.requestFocus();
            return;
        }else if(!checkDate(lastDay)){
            JOptionPane.showMessageDialog(this, "날짜 형식에 맞춰서 입력해주세요(예:2023-01-01)");
            tf_Serch2.requestFocus();
            return;
        }
        
        //날짜 범위 체크
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        
        //오늘날짜보다 큰 날짜 넣으면 입력 막기
        String date3 = sdf.format(new Date());
        Date today = formatter.parse(date3);
        Date date1 = formatter.parse(firstDay);
        Date date2 = formatter.parse(lastDay);
        
        //compareTo : 앞에 변수가 크면 1, 작으면 -1, 같으면 0 
        int result = date1.compareTo(today);
        
        //입력한 날짜가 오늘 날짜보다 크면
        if(result>0){
            JOptionPane.showMessageDialog(this, "날짜는 오늘까지 입력 가능합니다.");
            tfSerch1.requestFocus();
            return;
        }
        
        result = date2.compareTo(today);
        
        if(result>0){
            JOptionPane.showMessageDialog(this, "날짜는 오늘까지 입력 가능합니다.");
            tf_Serch2.requestFocus();
            return;
        }
        
       
        //해당 입력 데이터의 날짜 범위 체크(적은 날짜 - 큰 날짜 순)
        result = date1.compareTo(date2);
        
        //firstDay가 lastDay보다 작으면(범위가 유효하면)
        if(result<=0){
            
            //2
            Dao = new StatisticsDAO();
            List<Statistics1DTO> list = Dao.showAllDateTable_Serch(firstDay,lastDay);

            if(list==null||list.isEmpty()){
                JOptionPane.showMessageDialog(this, "검색된 데이터가 없습니다.");
            }        
            //3
            Object[][] data = new Object[list.size()][colNames1.length];
            for(int i=0; i<list.size();i++){
                Statistics1DTO dto = list.get(i);
                String date[] = dto.getSellDate().split("-");

                data[i][0] = date[0]+"년 "+date[1]+"월 "+date[2]+"일";
                data[i][1] = df.format(dto.getPrice())+"원";
                data[i][2] = dto.getQty()+"건";
            }
            model.setDataVector(data,colNames1);
            jTable1.setModel(model);
            //columnSize();
            tableCellCenter(jTable1);   
        }else{
            JOptionPane.showMessageDialog(this, "날짜를 확인해주세요");
            tfSerch1.requestFocus();
            return;
        }
        
      
    }

    //날짜 형식 체크(검색)
    public static boolean checkDate(String checkDate) {
        try {
            SimpleDateFormat dateFormatParser = new SimpleDateFormat("yyyy-MM-dd"); //검증할 날짜 포맷 설정
            dateFormatParser.setLenient(false); //false일경우 처리시 입력한 값이 잘못된 형식일 시 오류가 발생
            dateFormatParser.parse(checkDate); //대상 값 포맷에 적용되는지 확인
            return true;
        } catch (Exception e) {
            return false;
        }
    }
//------------------------연령&성별 통계------------------------------------------------------------

    //연령별 주간 조회(디폴트)
    private void showDefaultRankAgeNGenger_Week() throws SQLException {
        //1
        //2
        Dao = new StatisticsDAO();
        List<Statistics2DTO> list = Dao.showDefaultRankAgeNGenger_Week();
        
        //3
        addTable2(list);
    }   

    //연령별 월간 조회
    private void showDefaultRankAgeNGenger_Month() throws SQLException {
        //1
        //2
        Dao = new StatisticsDAO();
        List<Statistics2DTO> list = Dao.showDefaultRankAgeNGenger_Month();
        //3
        addTable2(list);
        
    }
    
    
    //연령별 연간 조회
    private void showDefaultRankAgeNGenger_Year() throws SQLException {
        //1
        //2
        Dao = new StatisticsDAO();
        List<Statistics2DTO> list = Dao.showDefaultRankAgeNGenger_Year();
        //3
       addTable2(list);
        
    }
    
    
    

 //------------------------카테고리별 통계------------------------------------------------------------    

    //주간
    private void showCategoryRank_week() throws SQLException {
        //1
        //2
        List<Statistics3DTO> list = Dao.showCategoryRank_week();
        //3
        addTable3(list);
        
    } 
    

    private void showCategoryRank_Month() throws SQLException {
        //1
        //2
        List<Statistics3DTO> list = Dao.showCategoryRank_Month();
        //3
        addTable3(list);
    }

    private void showCategoryRank_Year() throws SQLException {
        //1
        //2
        List<Statistics3DTO> list = Dao.showCategoryRank_Year();
        //3
        addTable3(list);
    }



 //------------------------테이블 출력 & 디자인------------------------------------------------------------    
  
   
        public void addTable2(List arr) throws SQLException{
        List<Statistics2DTO> list=arr;
    
        Object[][] data = new Object[list.size()][colNames2.length];
        for(int i=0; i<list.size();i++){
           
            Statistics2DTO dto =list.get(i);
            data[i][0] =i+1+"위";
            data[i][1] = dto.getAge()+"대";
            data[i][2] = dto.getGender();
            data[i][3] = dto.getCount()+"건";
        }
        model.setDataVector(data,colNames2);
        jTable2.setModel(model);
        tableCellCenter(jTable2);
    }

    public void addTable3(List arr) throws SQLException{
        List<Statistics3DTO> list=arr;
    
        Object[][] data = new Object[list.size()][colNames3.length];
        for(int i=0; i<list.size();i++){
           
            Statistics3DTO dto =list.get(i);
            data[i][0] = i+1+"위";
            data[i][1] = dto.getCaName();
            data[i][2] = dto.getQty()+"권";
        }
        model.setDataVector(data,colNames3);
        jTable4.setModel(model);
        tableCellCenter(jTable4);
    }        

   // 테이블 가운데 정렬하기
    public void tableCellCenter(JTable t){
        
        //테이블 해더 가운데 정렬
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer)t.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        t.getTableHeader().setDefaultRenderer(renderer);

        //셀 가운데 정렬
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.CENTER);

        TableColumnModel tcm = t.getColumnModel();
         
        //컬럼 갯수만큼 컬럼 가져와 for문으로 각 행에 대한 정렬
        for (int i = 0; i < tcm.getColumnCount(); i++) {
            tcm.getColumn(i).setCellRenderer(dtcr);
        }
    }  
}

