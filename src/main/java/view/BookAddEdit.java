/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import model.BookDAO;
import model.BookDTO;
import model.CategoryDAO;
import model.ContractDAO;
import model.PublisherDAO;

/**
 *
 * @author yj
 */
public class BookAddEdit extends javax.swing.JFrame implements ActionListener{
    public static final int BOOK_EDIT = 1;
    public static final int BOOK_ADD = 2;
    private PublisherDAO publisherDao;
    private ContractDAO contractDao;
    private CategoryDAO categoryDao;
    private BookDAO bookDao;
    private int bookState;
    private int bookNo;
    private Publication publication;
    /**
     * Creates new form ContractAdd
     */
    public BookAddEdit() {
        initComponents();

        init();
        addEvent();     
    }
    
    public BookAddEdit(int state, Publication publication) {
        this();
        this.bookState = state;
        this.publication = publication;
        bookProc();
    }

    public BookAddEdit(int state, int bookNo, Publication publication) {
        this();
        this.bookState = state;
        this.bookNo = bookNo;
        tf_bookNo.setText(bookNo + "");
        bookProc();
        this.publication = publication;
    }
    
    private void init() {
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        publisherDao = new PublisherDAO();
        categoryDao = new CategoryDAO();
        contractDao = new ContractDAO();
        bookDao = new BookDAO();
        setLocationRelativeTo(null); //가운데 배치

        tf_bookNo.enable(false);

        try {
            categoryComboBoxSet();
            publisherComboBoxSet();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    
    
    //---------------이벤트 핸들러-------------------------------------------------------


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lb_puNo = new javax.swing.JLabel();
        lb_puName = new javax.swing.JLabel();
        lb_puTel = new javax.swing.JLabel();
        lb_puManager = new javax.swing.JLabel();
        lb_puHp = new javax.swing.JLabel();
        bt_ok = new javax.swing.JButton();
        tf_subject = new javax.swing.JTextField();
        tf_price = new javax.swing.JTextField();
        tf_writer = new javax.swing.JTextField();
        lb_puHp1 = new javax.swing.JLabel();
        cb_publisher = new javax.swing.JComboBox<>();
        cb_category = new javax.swing.JComboBox<>();
        cb_conNo = new javax.swing.JComboBox<>();
        bt_cancel = new javax.swing.JButton();
        lb_bookNo = new javax.swing.JLabel();
        tf_bookNo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lb_puNo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_puNo.setText("제목");

        lb_puName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_puName.setText("저자");

        lb_puTel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_puTel.setText("출판사");

        lb_puManager.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_puManager.setText("카테고리");

        lb_puHp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_puHp.setText("금액");

        bt_ok.setText("확인");

        lb_puHp1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_puHp1.setText("계약번호");

        bt_cancel.setText("취소");

        lb_bookNo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_bookNo.setText("책 번호");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(bt_ok, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lb_puHp1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cb_conNo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lb_puHp, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tf_price))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lb_puTel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lb_puManager, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cb_publisher, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cb_category, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lb_bookNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lb_puNo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lb_puName, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_writer)
                                    .addComponent(tf_subject)
                                    .addComponent(tf_bookNo))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_bookNo)
                    .addComponent(tf_bookNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_puNo)
                    .addComponent(tf_subject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_puName)
                    .addComponent(tf_writer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_puTel)
                    .addComponent(cb_publisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_puManager)
                    .addComponent(cb_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_puHp)
                    .addComponent(tf_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_puHp1)
                    .addComponent(cb_conNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_ok)
                    .addComponent(bt_cancel))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookAddEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookAddEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookAddEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookAddEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookAddEdit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_cancel;
    private javax.swing.JButton bt_ok;
    private javax.swing.JComboBox<String> cb_category;
    private javax.swing.JComboBox<String> cb_conNo;
    private javax.swing.JComboBox<String> cb_publisher;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lb_bookNo;
    private javax.swing.JLabel lb_puHp;
    private javax.swing.JLabel lb_puHp1;
    private javax.swing.JLabel lb_puManager;
    private javax.swing.JLabel lb_puName;
    private javax.swing.JLabel lb_puNo;
    private javax.swing.JLabel lb_puTel;
    private javax.swing.JTextField tf_bookNo;
    private javax.swing.JTextField tf_price;
    private javax.swing.JTextField tf_subject;
    private javax.swing.JTextField tf_writer;
    // End of variables declaration//GEN-END:variables
    //팝업 책등록, 책수정 결정
    private void bookProc() {
        if (bookState == BOOK_ADD) {
            tf_bookNo.setVisible(false);
            lb_bookNo.setVisible(false);
            bt_ok.setText("등록");
            setTitle("책 등록");
        } else if (bookState == BOOK_EDIT) {
            bt_ok.setText("수정");
            setTitle("책 수정");
        }
    }

    //카테고리 콤보박스 값세팅
    private void categoryComboBoxSet() throws SQLException {
        Vector<String> vec = categoryDao.categoryComboBoxSet();

        DefaultComboBoxModel<String> caName_comboBox = new DefaultComboBoxModel<>(vec);
        cb_category.setModel(caName_comboBox);
    }

    //출판사 콤보박스 값세팅
    private void publisherComboBoxSet() throws SQLException {
        Vector<String> vec = publisherDao.publisherComboBoxSet();

        DefaultComboBoxModel<String> puName_comboBox = new DefaultComboBoxModel<>(vec);
        cb_publisher.setModel(puName_comboBox);
    }

    //계약번호 콤보박스 값세팅
    private void contractComboBoxSet() throws SQLException {
        String puName = (String) cb_publisher.getSelectedItem();

        Vector<String> vec = contractDao.contractComboBoxSet(puName);
        
        List<Map> list = bookDao.bookshowAll("b.bookNo");

        for (int i = 0; i < list.size(); i++) {
            Map map = list.get(i);
            for (int j = 0; j < vec.size(); j++) {
                String conNo = (String) list.get(i).get("conNo");
                String a = vec.get(j);
                System.out.println("conNo: " + conNo + ", a: " + a);
                if (conNo.equals(a)) {
                    vec.remove(j);
                }
            }
        }

        DefaultComboBoxModel<String> conNo_comboBox = new DefaultComboBoxModel<>(vec);
        cb_conNo.setModel(conNo_comboBox);
    }

    private void addEvent() {
        bt_ok.addActionListener(this);
        bt_cancel.addActionListener(this);

        cb_publisher.addItemListener(new EventHandler());
    }

    class EventHandler extends MouseAdapter implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent e) {
            try {
                if (e.getSource() == cb_publisher) { //출판사를 선택했을때 해당출판사와 맺은 계약을 콤보박스에 세팅
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        if (cb_publisher.getSelectedIndex() != 0) {
                            contractComboBoxSet();
                        }
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            if (e.getSource() == bt_ok) {
                if (bookState == BOOK_ADD) {
                    bookAdd();
                } else {
                    bookEdit();
                }
            } else if (e.getSource() == bt_cancel) {
                this.dispose();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    //책 등록
    private void bookAdd() throws SQLException {
        String subject = tf_subject.getText();
        String writer = tf_writer.getText();
        String puName = (String) cb_publisher.getSelectedItem();
        String puId = publisherDao.publisherPuId(puName);
        String caName = (String) cb_category.getSelectedItem();
        int caNo = categoryDao.categoryNo(caName);
        int price = Integer.parseInt(tf_price.getText());
        String conNo = (String) cb_conNo.getSelectedItem();

        if (subject == null || subject.isEmpty()) {
            JOptionPane.showMessageDialog(this, "책제목을 입력하세요");
            tf_subject.requestFocus();
            return;
        } else if (writer == null || writer.isEmpty()) {
            JOptionPane.showMessageDialog(this, "작가명을 입력하세요");
            tf_writer.requestFocus();
            return;
        } else if (cb_category.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "카테고리를 선택해 주세요");
            return;
        } else if (cb_conNo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "계약번호를 선택해 주세요");
            return;
        } else if (cb_publisher.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "출판사를 선택해 주세요");
            return;
        } else if (tf_price.getText() == null || tf_price.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "가격을 입력하세요");
            return;
        }
        
        System.out.println("카테고리명: " + caName);
        System.out.println("카테고리번호: " + caNo);

        BookDTO dto = new BookDTO();
        dto.setSubject(subject);
        dto.setWriter(writer);
        dto.setPuId(puId);
        dto.setCaNo(caNo);
        dto.setPrice(price);
        dto.setConNo(conNo);

        int cnt = bookDao.bookAdd(dto);

        if (cnt > 0) {
            JOptionPane.showMessageDialog(this, "책등록 성공");
            publication.bookShowAll("b.bookNo");
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "책등록 실패");
        }
    }

    //책 수정
    private void bookEdit() throws SQLException {
        String subject = tf_subject.getText();
        String writer = tf_writer.getText();
        String puName = (String) cb_publisher.getSelectedItem();
        String puId = publisherDao.publisherPuId(puName);
        String caName = (String) cb_category.getSelectedItem();
        int caNo = categoryDao.categoryNo(caName);
        int price = Integer.parseInt(tf_price.getText());
        String conNo = (String) cb_conNo.getSelectedItem();

        if (subject == null || subject.isEmpty()) {
            JOptionPane.showMessageDialog(this, "책제목을 입력하세요");
            tf_subject.requestFocus();
            return;
        } else if (writer == null || writer.isEmpty()) {
            JOptionPane.showMessageDialog(this, "작가명을 입력하세요");
            tf_writer.requestFocus();
            return;
        } else if (cb_category.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "카테고리를 선택해 주세요");
            return;
        } else if (cb_conNo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "계약번호를 선택해 주세요");
            return;
        } else if (cb_publisher.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "출판사를 선택해 주세요");
            return;
        } else if (tf_price.getText() == null || tf_price.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "가격을 입력하세요");
            return;
        }

        BookDTO dto = new BookDTO();
        dto.setBookNo(bookNo);
        dto.setSubject(subject);
        dto.setWriter(writer);
        dto.setPuId(puId);
        dto.setCaNo(caNo);
        dto.setPrice(price);
        dto.setConNo(conNo);

        int cnt = bookDao.bookEdit(dto);

        if (cnt > 0) {
            JOptionPane.showMessageDialog(this, "수정성공");
            publication.bookShowAll("b.bookNo");
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "수정실패");
        }
    }

}
